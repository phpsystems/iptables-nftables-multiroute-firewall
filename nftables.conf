#!/usr/sbin/nft -f

define wan            = eth0
define lan            = eth1
define wan2           = eth2
define vpn            = tun0
define vpnserver      = tun1
define localhost      = lo
define vpn_net        = 10.8.0.0/24
define vpn_server_net = 10.0.0.0/24
define machine1       = 192.168.0.3
define machine2       = 192.168.0.5
define public_ip      = 43.43.43.43
define antilanscan    = { 22, 8080 } # ports that are really opened on your Lan interface (to catch lan initiated scans and have a canary)
define denied_to_surf = { 192.168.0.28, 192.168.0.29, 192.168.0.30 }
define blocklist      = { 42.42.42.42/20 }
define icmp_v6        = { destination-unreachable, echo-reply, echo-request, nd-neighbor-solicit, nd-router-advert, nd-neighbor-advert, packet-too-big, parameter-problem, time-exceeded }

flush ruleset

table ip nat {

  chain prerouting {
    type nat hook prerouting priority -100; policy accept;
      iif $wan tcp dport 81   dnat to 192.168.0.100
      iif $wan tcp dport 80   dnat to 192.168.0.50:8080
      iif $wan tcp dport 2222 dnat to 192.168.0.33:22 
      iif $wan tcp dport 3389 dnat to 192.168.0.45
      iif $wan tcp dport 8890 dnat to 192.168.1.2:443 # ISP box web interface 
  }

  chain postrouting {
    type nat hook postrouting priority 100; policy accept;
      oif $wan snat to 192.168.1.1  # oif / iif for fixed interfaces and oifname/iifname for non-perm devices like tun
      oif $wan2 snat to 192.168.2.1
      oifname $vpnserver snat to 10.0.0.1
      oifname $vpn masquerade # since interface IP changes, it's easier to masquerade
  }  
}

table inet filter {

  set whitelist_candidates {
    type ipv4_addr . inet_service
    flags timeout
  }

  set whitelist { # whitelist for knockd whitelist (which is extending the whitelist to /24 of the accepted IP)
     type ipv4_addr
     flags interval, timeout
  }

  set whitelist2 { # whitelist for nftables based port knocking 
     type ipv4_addr 
     flags timeout
  }

  chain input {
    type filter hook input priority 0; policy drop;
      ct state related,established                               accept
      iif $lan tcp dport != $antilanscan log prefix "LAN SCAN:"  drop  # will detect port scans intiated from the LAN (avoid lateral moves) 
      #-------------- Early accept -------------
      iif $lan                                                   accept
      iif $localhost                                             accept
      iifname $vpnserver                                         accept
      ip saddr @whitelist                                        accept
      ip saddr @whitelist2                                       accept
      icmpv6 type $icmp_v6                                       accept
      #--------------- Port knocking -----------
      tcp dport 1010 add @whitelist_candidates {ip  saddr . 1117 timeout 2s}
      tcp dport 1117 ip saddr . tcp dport @whitelist_candidates add @whitelist_candidates {ip  saddr . 199 timeout 2s}
      tcp dport 199  ip saddr . tcp dport @whitelist_candidates add @whitelist_candidates {ip  saddr . 45  timeout 2s}
      tcp dport 45   ip saddr . tcp dport @whitelist_candidates add @whitelist2           {ip saddr timeout 180s} log prefix "Portknocked: "
      #---------- Scans/Spoofs/Invalid ---------
      meta l4proto tcp tcp flags & (fin|syn|rst|psh|ack|urg) == fin|syn|rst|psh|ack|urg log prefix "Drop tcp flags:"  drop
      meta l4proto tcp tcp flags & (fin|syn|rst|psh|ack|urg) == fin|syn|rst|ack|urg     log prefix "Drop tcp flags:"  drop
      meta l4proto tcp tcp flags & (fin|syn|rst|psh|ack|urg) == fin|psh|urg             log prefix "Drop tcp flags:"  drop
      meta l4proto tcp tcp flags & (fin|syn|rst|psh|ack|urg) == fin                     log prefix "Drop tcp flags:"  drop
      meta l4proto tcp tcp flags & (fin|syn|rst|psh|ack|urg) == 0x0                     log prefix "Drop tcp flags:"  drop
      meta l4proto tcp tcp flags & (syn|rst) == syn|rst                                 log prefix "Drop tcp flags:"  drop
      meta l4proto tcp tcp flags & (fin|syn) == fin|syn                                 log prefix "Drop tcp flags:"  drop
      meta l4proto tcp tcp dport 0                                                      log prefix "Drop tcp flags:"  drop
      meta l4proto udp udp dport 0                                                      log prefix "Drop tcp flags:"  drop
      meta l4proto tcp tcp sport 0                                                      log prefix "Drop tcp flags:"  drop
      iif != lo ip saddr 127.0.0.0/8                                                    log prefix "Fake localhost:"  drop
      iif $wan ct state invalid                                                         log prefix "Invalid packet:"  drop
      iif $wan ip saddr != @whitelist                                                   log prefix "Not whitelisted:" drop
  }

  chain forward {
    type filter hook forward priority 0; policy drop;
      iif $lan ip saddr $denied_to_surf                                        drop 
      iif $lan                                                                 accept
      ct state established,related                                             accept
      ct state invalid               log prefix "Invalid packet:"              drop
      ip saddr $blocklist            log prefix "Blacklisted:"                 drop
      ip saddr @whitelist                                                      accept
      ip saddr @whitelist2                                                     accept
      iifname $vpnserver                                                       accept
      iifname $vpn meta l4proto udp ip daddr 192.168.0.2 udp dport 50001       accept
      iifname $vpn meta l4proto tcp ip daddr 192.168.0.2 tcp dport 50001       accept
      iifname $vpn meta l4proto tcp ip daddr 192.168.0.3 tcp dport 1000        accept
  }

  chain output {
    type filter hook output priority 0; policy accept;
  }
}

table ip mangle {
  chain prerouting {
    type filter hook prerouting priority -150; policy accept; 
      mark != 0x0                        accept
      ip saddr $machine2 tcp sport 50001 meta mark set 0x2 # route through connexion 2
      ip saddr $machine2 udp sport 50001 meta mark set 0x2 # route through connexion 2
      ip saddr $machine1 tcp dport 1000  meta mark set 0x2 # route through connexion 2
      ip saddr 192.168.0.4               meta mark set 0x4 # route through connexion 4
      ip saddr 192.168.0.6               meta mark set 0x1 # by default, everyting is mark 1 anyway
  }
  
  chain postrouting {
    type filter hook postrouting priority -150; policy accept;
      ct mark set mark
  }
}
